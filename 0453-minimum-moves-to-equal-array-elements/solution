Intuition
The problem statement says to increment n-1 elements out of n elements in 1 step.
This can also be considered as decrementing only 1 element out of n elements in 1 step.
Hence, we just need to find the minimum element of the array and make other elements equal to it.
Lets take an example array nums=[1,2,3]

So, instead of:

[1,2,3] -> [2,3,3] -> [3,3,4] -> [4,4,4] = 3 moves

We do:

[1,2,3] -> [1,2,2] -> [1,1,2] -> [1,1,1] = 3 moves

You can observe that the corresponding elements in the two methods have the same difference.

Code
// Solution 1 : Using sort
class Solution {
public:
    int minMoves(vector<int>& nums) {
        int count = 0;
        sort(nums.begin(), nums.end());
        for(int i=1; i<nums.size(); i++)
            count += nums[i]-nums[0];
        return count;
    }
};

// Solution 2 : Using min_element
class Solution {
public:
    int minMoves(vector<int>& nums) {
        int count = 0, min = *min_element(nums.begin(), nums.end());
        for(int i=1; i<nums.size(); i++)
            count += nums[i] - min;
        return count;
    }
};
